<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ifunnyy</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-14T09:20:37.123Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Johnny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>arguments</title>
    <link href="http://yoursite.com/2018/08/14/arguments/"/>
    <id>http://yoursite.com/2018/08/14/arguments/</id>
    <published>2018-08-14T04:00:00.000Z</published>
    <updated>2018-08-14T09:20:37.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="arguments-callee"><a href="#arguments-callee" class="headerlink" title="arguments.callee"></a>arguments.callee</h1><p>arguments 的主要用途是保存函数参数， 但这个对象还有一个名叫 callee 的属性，返回正被执行的 Function 对象，也就是所指定的 Function 对象的正文，这有利于匿名函数的递归或者保证函数的封装性。 </p><p>比如阶乘算法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var num = (function (n) &#123;</span><br><span class="line">    if (n == 1) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return n * arguments.callee(n - 1);</span><br><span class="line">&#125;(5))</span><br><span class="line"></span><br><span class="line">console.log(num);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">120</span><br></pre></td></tr></table></figure><p>现在已经不推荐使用arguments.callee()；</p><p>原因：访问 arguments 是个很昂贵的操作，因为它是个很大的对象，每次递归调用时都需要重新创建。影响现代浏览器的性能，还会影响闭包。</p><p>现在arguments.callee 被弃用了。怎么办，其实很简单，给内部函数一个名字即可（当函数被调用时，它的arguments.callee对象就会指向自身，也就是一个对自己的引用。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var num = (function fn(n) &#123;</span><br><span class="line">    if (n == 1) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return n * fn(n - 1);</span><br><span class="line">&#125;(5))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;arguments-callee&quot;&gt;&lt;a href=&quot;#arguments-callee&quot; class=&quot;headerlink&quot; title=&quot;arguments.callee&quot;&gt;&lt;/a&gt;arguments.callee&lt;/h1&gt;&lt;p&gt;arguments 的主要用
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="arguments" scheme="http://yoursite.com/tags/arguments/"/>
    
      <category term="callee" scheme="http://yoursite.com/tags/callee/"/>
    
  </entry>
  
</feed>
