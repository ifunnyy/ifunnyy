{"meta":{"title":"ifunnyy","subtitle":null,"description":"仰天大笑出门去 我辈岂是蓬蒿人","author":"Johnny","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2017-10-06T11:29:21.000Z","updated":"2018-08-14T09:21:18.333Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-10-06T11:29:21.000Z","updated":"2018-08-14T09:14:30.320Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"arguments","slug":"arguments","date":"2018-08-14T04:00:00.000Z","updated":"2018-08-14T09:20:37.123Z","comments":true,"path":"2018/08/14/arguments/","link":"","permalink":"http://yoursite.com/2018/08/14/arguments/","excerpt":"","text":"arguments.calleearguments 的主要用途是保存函数参数， 但这个对象还有一个名叫 callee 的属性，返回正被执行的 Function 对象，也就是所指定的 Function 对象的正文，这有利于匿名函数的递归或者保证函数的封装性。 比如阶乘算法: 12345678var num = (function (n) &#123; if (n == 1) &#123; return 1; &#125; return n * arguments.callee(n - 1);&#125;(5))console.log(num); 12output:120 现在已经不推荐使用arguments.callee()； 原因：访问 arguments 是个很昂贵的操作，因为它是个很大的对象，每次递归调用时都需要重新创建。影响现代浏览器的性能，还会影响闭包。 现在arguments.callee 被弃用了。怎么办，其实很简单，给内部函数一个名字即可（当函数被调用时，它的arguments.callee对象就会指向自身，也就是一个对自己的引用。） 123456var num = (function fn(n) &#123; if (n == 1) &#123; return 1; &#125; return n * fn(n - 1);&#125;(5))","categories":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/categories/javascript/"}],"tags":[{"name":"arguments","slug":"arguments","permalink":"http://yoursite.com/tags/arguments/"},{"name":"callee","slug":"callee","permalink":"http://yoursite.com/tags/callee/"}]}]}